---
tool:
  name: "domain_analyzer"
  type: "python"
  description: "Analyze domain patterns and anomalies from WHOIS and DNS data"
  version: "1.0.0"

implementation:
  language: "python"
  dependencies:
    - "python-dateutil>=2.8.2"
    - "tld>=0.13.0"
  code: |
    from typing import Dict, Any, List
    from dateutil.parser import parse
    from datetime import datetime
    from tld import get_tld

    def analyze(whois_data: Dict[str, Any], dns_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyze domain patterns and anomalies.
        
        Args:
            whois_data: WHOIS lookup results
            dns_data: DNS lookup results
            
        Returns:
            Dictionary containing analysis results
        """
        analysis = {
            "risk_score": 0,
            "anomalies": [],
            "patterns": [],
            "recommendations": []
        }

        try:
            # Analyze registration age
            if "creation_date" in whois_data:
                creation_date = parse(whois_data["creation_date"])
                age_days = (datetime.now() - creation_date).days
                if age_days < 30:
                    analysis["risk_score"] += 20
                    analysis["anomalies"].append("New domain (less than 30 days old)")

            # Check nameserver consistency
            if "name_servers" in whois_data and "records" in dns_data:
                whois_ns = set(ns.lower() for ns in whois_data["name_servers"])
                dns_ns = set(ns.lower() for ns in dns_data["records"])
                if whois_ns != dns_ns:
                    analysis["risk_score"] += 15
                    analysis["anomalies"].append("Nameserver mismatch between WHOIS and DNS")

            # Analyze domain structure
            domain = whois_data.get("domain_name", "").lower()
            tld_info = get_tld(domain, as_object=True)
            if len(tld_info.domain.split(".")) > 2:
                analysis["risk_score"] += 10
                analysis["patterns"].append("Multi-level subdomain structure")

            # Generate recommendations based on analysis
            if analysis["risk_score"] > 30:
                analysis["recommendations"].append("Consider additional verification steps")
            elif analysis["risk_score"] > 20:
                analysis["recommendations"].append("Monitor for suspicious activity")

            return analysis
        except Exception as e:
            return {"error": str(e)}

parameters:
  - name: "whois_data"
    type: "object"
    description: "WHOIS lookup results"
    required: true

  - name: "dns_data"
    type: "object"
    description: "DNS lookup results"
    required: true

examples:
  - description: "Analyze suspicious domain"
    input:
      whois_data:
        domain_name: "example.com"
        creation_date: "2024-01-01"
        name_servers: ["ns1.example.com", "ns2.example.com"]
      dns_data:
        domain: "example.com"
        record_type: "NS"
        records: ["ns3.example.com", "ns4.example.com"]
    output:
      risk_score: 35
      anomalies:
        - "New domain (less than 30 days old)"
        - "Nameserver mismatch between WHOIS and DNS"
      patterns:
        - "Multi-level subdomain structure"
      recommendations:
        - "Consider additional verification steps" 