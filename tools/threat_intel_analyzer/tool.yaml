---
tool:
  name: "threat_intel_analyzer"
  type: "python"
  description: "Analyze domain against threat intelligence feeds and databases"
  version: "1.0.0"

implementation:
  language: "python"
  dependencies:
    - "requests>=2.31.0"
    - "python-whois>=0.8.0"
    - "vt-py>=0.18.0"
  code: |
    from typing import Dict, Any, List
    import requests
    import virustotal_python
    from datetime import datetime, timedelta

    class ThreatIntelAnalyzer:
        def __init__(self, api_keys: Dict[str, str]):
            self.api_keys = api_keys
            self.vt_client = virustotal_python.Virustotal(api_keys.get("virustotal"))

        def analyze(self, domain: str, whois_data: Dict[str, Any]) -> Dict[str, Any]:
            """
            Analyze domain against threat intelligence sources.
            
            Args:
                domain: Domain to analyze
                whois_data: WHOIS data for the domain
                
            Returns:
                Dictionary containing threat intelligence analysis
            """
            analysis = {
                "threat_score": 0,
                "indicators": [],
                "sources": [],
                "recommendations": []
            }

            try:
                # VirusTotal analysis
                vt_analysis = self._analyze_virustotal(domain)
                if vt_analysis:
                    analysis["threat_score"] += vt_analysis.get("score", 0)
                    analysis["indicators"].extend(vt_analysis.get("indicators", []))
                    analysis["sources"].append("VirusTotal")

                # WHOIS-based analysis
                whois_analysis = self._analyze_whois(whois_data)
                analysis["threat_score"] += whois_analysis.get("score", 0)
                analysis["indicators"].extend(whois_analysis.get("indicators", []))

                # Generate recommendations
                if analysis["threat_score"] > 70:
                    analysis["recommendations"].append("High threat level detected - immediate action recommended")
                elif analysis["threat_score"] > 40:
                    analysis["recommendations"].append("Moderate threat level - further investigation recommended")

                return analysis
            except Exception as e:
                return {"error": str(e)}

        def _analyze_virustotal(self, domain: str) -> Dict[str, Any]:
            """Analyze domain using VirusTotal."""
            try:
                resp = self.vt_client.domain_info(domain)
                score = 0
                indicators = []

                if resp.get("last_analysis_stats", {}).get("malicious", 0) > 0:
                    score += 40
                    indicators.append("Malicious activity reported")

                if resp.get("last_analysis_stats", {}).get("suspicious", 0) > 0:
                    score += 20
                    indicators.append("Suspicious activity reported")

                return {"score": score, "indicators": indicators}
            except Exception:
                return {"score": 0, "indicators": []}

        def _analyze_whois(self, whois_data: Dict[str, Any]) -> Dict[str, Any]:
            """Analyze WHOIS data for threat indicators."""
            score = 0
            indicators = []

            # Check for recent registration
            if "creation_date" in whois_data:
                creation_date = whois_data["creation_date"]
                if isinstance(creation_date, str):
                    creation_date = datetime.strptime(creation_date, "%Y-%m-%d %H:%M:%S")
                if datetime.now() - creation_date < timedelta(days=30):
                    score += 20
                    indicators.append("Recently registered domain")

            # Check for privacy protection
            if "registrar" in whois_data and "privacy" in whois_data["registrar"].lower():
                score += 10
                indicators.append("Privacy protection enabled")

            return {"score": score, "indicators": indicators}

parameters:
  - name: "domain"
    type: "string"
    description: "Domain to analyze"
    required: true

  - name: "whois_data"
    type: "object"
    description: "WHOIS data for the domain"
    required: true

  - name: "api_keys"
    type: "object"
    description: "API keys for threat intelligence services"
    required: true

examples:
  - description: "Analyze suspicious domain"
    input:
      domain: "example.com"
      whois_data:
        domain_name: "example.com"
        creation_date: "2024-01-01"
        registrar: "Privacy Protection Service"
      api_keys:
        virustotal: "your-api-key-here"
    output:
      threat_score: 70
      indicators:
        - "Recently registered domain"
        - "Privacy protection enabled"
        - "Malicious activity reported"
      sources:
        - "VirusTotal"
      recommendations:
        - "High threat level detected - immediate action recommended" 