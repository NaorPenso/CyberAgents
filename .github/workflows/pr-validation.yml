---
  name: PR Validation
  
  on:
    pull_request:
      # Trigger on PRs targeting the main branch
      branches: [main]
    # Add workflow_dispatch trigger
    workflow_dispatch:
      inputs:
        use_local_llm:
          description: 'Use local Ollama LLM for tests?'
          required: true
          default: 'true' # Default to true for manual runs as well
          type: boolean
    # push:
    #   branches: [main]
  
  # Add permissions required by the dependency review action
  permissions:
    contents: read
    pull-requests: write # Allows the action to post comments
  
  jobs:
    validate:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          # Use the Python version defined in pyproject.toml
          python-version: ['3.11']
      # Define environment variables for the job based on trigger type
      env:
         # For PRs (default), use local LLM. For dispatch, use input.
         USE_LOCAL_LLM_INPUT: ${{ github.event_name == 'pull_request' || github.event.inputs.use_local_llm == 'true' }}
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          # Fetch history needed for pytest-picked diff
          with:
            fetch-depth: 0
  
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
  
        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
  
        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v4
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
  
        - name: Install dependencies
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          run: poetry install --no-interaction --no-root
  
        - name: Install project and test extras
          # Install root project and extras like pytest-picked
          run: poetry install --no-interaction --extras test
  
        # Pre-commit is good practice, but ensure its config aligns with poetry environment
        # - name: Run pre-commit hooks
        #   run: poetry run pre-commit run --all-files
  
        - name: Fetch target branch for diff
          run: git fetch origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
  
        # --- Ollama Setup (Conditional) --- 
        - name: Install and Run Ollama (if using local LLM)
          if: env.USE_LOCAL_LLM_INPUT == 'true'
          run: ./.github/scripts/install_ollama.sh
        # --- End Ollama Setup --- 
  
        # --- Test Execution (Conditional Env Vars) --- 
        - name: Run tests on changed files in 'tests' (excluding security)
          env:
            # Conditionally set LLM env vars
            USE_LOCAL_LLM: ${{ env.USE_LOCAL_LLM_INPUT }}
            OPENAI_API_KEY: ${{ env.USE_LOCAL_LLM_INPUT == 'true' && 'ollama' || secrets.OPENAI_API_KEY }}
            # OLLAMA_BASE_URL and OLLAMA_MODEL are used by llm_utils if USE_LOCAL_LLM is true
            # Other secrets
            VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
            SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          run: |
            echo "Running tests in tests/ (excluding test_security.py)"
            poetry run pytest --picked --parent-branch origin/${{ github.base_ref }} -v tests/ --ignore=tests/test_security.py

        - name: Run tests on changed files in 'tests/test_security.py'
          env:
            USE_LOCAL_LLM: ${{ env.USE_LOCAL_LLM_INPUT }}
            OPENAI_API_KEY: ${{ env.USE_LOCAL_LLM_INPUT == 'true' && 'ollama' || secrets.OPENAI_API_KEY }}
            VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
            SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          run: |
            echo "Running tests in tests/test_security.py"
            poetry run pytest --picked --parent-branch origin/${{ github.base_ref }} -v tests/test_security.py
  
        - name: Run tests on changed files in 'agents' directory
          env:
            USE_LOCAL_LLM: ${{ env.USE_LOCAL_LLM_INPUT }}
            OPENAI_API_KEY: ${{ env.USE_LOCAL_LLM_INPUT == 'true' && 'ollama' || secrets.OPENAI_API_KEY }}
            VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
            SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          run: |
            echo "Running tests in agents/"
            poetry run pytest --picked --parent-branch origin/${{ github.base_ref }} -v agents/
  
        - name: Run tests on changed files in 'tools' directory
          env:
            USE_LOCAL_LLM: ${{ env.USE_LOCAL_LLM_INPUT }}
            OPENAI_API_KEY: ${{ env.USE_LOCAL_LLM_INPUT == 'true' && 'ollama' || secrets.OPENAI_API_KEY }}
            VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
            SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
          run: |
            echo "Running tests in tools/"
            poetry run pytest --picked --parent-branch origin/${{ github.base_ref }} -v tools/
        # --- End Test Execution --- 
  
    security_scan: # New job for Semgrep
      runs-on: ubuntu-latest
      needs: [] # Runs in parallel with validate
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        # Semgrep action might require Python, include setup just in case
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11' # Match the version used for tests
            
        - name: Run Semgrep SAST Scan
          uses: returntocorp/semgrep-action@v1
          with:
            publishToken: ${{ secrets.SEMGREP_APP_TOKEN }} # Optional

    dependency_review: # New job for dependency vulnerability check
      runs-on: ubuntu-latest
      needs: [] # Runs in parallel
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Dependency Review
          uses: actions/dependency-review-action@v4
          with:
            # Block PRs with vulnerabilities of high severity or higher
            fail-on-severity: high 
            # Optional: comment on PR with findings 
            # comment-summary-in-pr: true 